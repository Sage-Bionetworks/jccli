name: build  #based on template https://github.com/docker/build-push-action

on:
  push:
    tags:
      - 'jcagentv(\d+)(\d+)(\d+)'  # build on tags like "jcagentvXX.YY.ZZ"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout src
        uses: actions/checkout@v2
      -
        name: Read repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      -
        name: Versioning logic
        id: prep
        run: |
          DOCKER_PATH=jcagent #Name of repo on Dockerhub is "jcagent"
          VERSION=$( echo ${GITHUB_REF} |sed -e "s#refs/tags/jcagent##g" ) #Remove "jcagent" from front of tag to get version number
          TAGS="${DOCKER_PATH},\
                ${DOCKER_PATH}:${VERSION},"
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=container_user::${{ github.repository_owner }}
          echo ::set-output name=source_repo::${DOCKER_PATH} #Pull layers from DockerHub
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push image
        id: docker_build_and_push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: integration_tests/jc-agent/Dockerfile
          platforms: linux/amd64 #, linux/arm64, linux/386
          build-args: |
            version=${{ steps.prep.outputs.version }}
            container_user=${{ steps.prep.outputs.container_user }}
            source_repo=${{ steps.prep.outputs.source_repo }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description="${{ fromJson(steps.repo.outputs.result).description }}"
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
